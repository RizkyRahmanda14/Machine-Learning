tugaspertemuan5
 November 23, 2024
 [7]: import pandas as pd
 sensus = {
 'tinggi': [158, 170, 183, 191, 155, 163, 180, 158, 178],
 'berat': [64, 86, 84, 80, 49, 59, 67, 54, 67],
 'jk': [
 'pria', 'pria', 'pria', 'pria', 'wanita', 'wanita', 'wanita', 'wanita',
 'wanita'
 ]
 }
 sensus_df = pd.DataFrame(sensus)
 sensus_df
 [7]:
 tinggi berat
 0
 1
 2
 3
 4
 158
 170
 183
 191
 155
 64
 86
 84
 80
 jk
 pria
 pria
 pria
 pria
 49 wanita
 5
 6
 7
 8
 163
 180
 158
 59 wanita
 67 wanita
 54 wanita
 178
 67 wanita
 [11]: import matplotlib.pyplot as plt
 fig, ax = plt.subplots()
 for jk, d in sensus_df.groupby('jk'):
 ax.scatter(d['tinggi'], d['berat'], label=jk)
 plt.legend(loc='upper left')
 plt.title('Sebaran Data Tinggi Badan, Berat Badan, dan Jenis Kelamin')
 plt.xlabel('Tinggi Badan (cm)')
 plt.ylabel('Berat Badan (kg)')
 plt.grid(True)
 1
plt.show()
 [15]: import numpy as np
 X_train = np.array(sensus_df[['tinggi', 'berat']])
 y_train = np.array(sensus_df['jk'])
 print(f'X_train:\n{X_train}\n')
 print(f'y_train: {y_train}')
 X_train:
 [[158 64]
 [170 86]
 [183 84]
 [191 80]
 [155 49]
 [163 59]
 [180 67]
 [158 54]
 [178 67]]
 2
y_train: ['pria' 'pria' 'pria' 'pria' 'wanita' 'wanita' 'wanita' 'wanita'
 'wanita']
 [17]: from sklearn.preprocessing import LabelBinarizer
 lb = LabelBinarizer()
 y_train = lb.fit_transform(y_train)
 print(f'y_train:\n{y_train}')
 y_train:
 [[0]
 [0]
 [0]
 [0]
 [1]
 [1]
 [1]
 [1]
 [1]]
 [19]: y_train = y_train.flatten()
 print(f'y_train: {y_train}')
 y_train: [0 0 0 0 1 1 1 1 1]
 [21]: from sklearn.neighbors import KNeighborsClassifier
 K = 3
 model = KNeighborsClassifier(n_neighbors=K)
 model.fit(X_train, y_train)
 [21]: KNeighborsClassifier(n_neighbors=3)
 [27]: tinggi_badan = 177
 berat_badan = 71
 X_new = np.array([tinggi_badan, berat_badan]).reshape(1,-1)
 X_new
 [27]: array([[177, 71]])
 [29]: y_new = model.predict(X_new)
 y_new
 [29]: array([1])
 [31]: lb.inverse_transform(y_new)
 3
[31]: array(['wanita'], dtype='<U6')
 [37]: import matplotlib.pyplot as plt
 fig, ax = plt.subplots()
 for jk, d in sensus_df.groupby('jk'):
 ax.scatter(d['tinggi'], d['berat'], label=jk)
 plt.scatter(tinggi_badan,
 berat_badan,
 marker='s',
 color='red',
 label='misterius')
 plt.legend(loc='upper left')
 plt.title('Sebaran Data Tinggi Badan, Berat Badan, dan Jenis Kelamin')
 plt.xlabel('Tinggi Badan (cm)')
 plt.ylabel('Berat Badan (kg)')
 plt.grid(True)
 plt.show()
 4
[39]: misterius = np.array([tinggi_badan, berat_badan])
 misterius
 [39]: array([177, 71])
 [41]: X_train
 [41]: array([[158, 64],
 [170, 86],
 [183, 84],
 [191, 80],
 [155, 49],
 [163, 59],
 [180, 67],
 [158, 54],
 [178, 67]], dtype=int64)
 [45]: from scipy.spatial.distance import euclidean
 data_jarak = [euclidean(misterius, d) for d in X_train]
 data_jarak
 [45]: [20.248456731316587,
 16.55294535724685,
 14.317821063276353,
 16.64331697709324,
 31.11269837220809,
 18.439088914585774,
 5.0,
 25.495097567963924,
 4.123105625617661]
 [47]: sensus_df['jarak'] = data_jarak
 sensus_df.sort_values(['jarak'])
 [47]:
 tinggi berat
 8
 178
 jk
 jarak
 67 wanita 4.123106
 6
 2
 1
 3
 5
 0
 7
 4
 180
 183
 170
 191
 163
 158
 158
 67 wanita 5.000000
 84
 86
 80
 pria 14.317821
 pria 16.552945
 pria 16.643317
 59 wanita 18.439089
 64
 pria 20.248457
 54 wanita 25.495098
 155
 49 wanita 31.112698
 5
[49]: X_test = np.array([[168, 65], [180, 96], [160, 52], [169, 67]])
 y_test = lb.transform(np.array(['pria', 'pria', 'wanita', 'wanita'])).flatten()
 print(f'X_test:\n{X_test}\n')
 print(f'y_test:\n{y_test}')
 X_test:
 [[168 65]
 [180 96]
 [160 52]
 [169 67]]
 y_test:
 [0 0 1 1]
 [51]: y_pred = model.predict(X_test)
 y_pred
 [51]: array([1, 0, 1, 1])
 [53]: from sklearn.metrics import accuracy_score
 acc = accuracy_score(y_test, y_pred)
 print(f'Accuracy: {acc}')
 Accuracy: 0.75
 [55]: from sklearn.metrics import precision_score
 prec = precision_score(y_test, y_pred)
 print(f'Precision: {prec}')
 Precision: 0.6666666666666666
 [59]: from sklearn.metrics import recall_score
 rec = recall_score(y_test, y_pred)
 print(f'Recall: {rec}')
 Recall: 1.0
 [63]: from sklearn.metrics import f1_score
 f1 = f1_score(y_test, y_pred)
 6
print(f'F1-score: {f1}')
 F1-score: 0.8
 [65]: from sklearn.metrics import classification_report
 cls_report = classification_report(y_test, y_pred)
 print(f'Classification Report:\n{cls_report}')
 Classification Report:
 precision
 0
 1
 accuracy
 macro avg
 weighted avg
 1.00
 0.67
 0.83
 0.83
 recall f1-score support
 0.50
 1.00
 0.75
 0.75
 0.67
 0.80
 0.75
 0.73
 0.73
 [67]: from sklearn.metrics import matthews_corrcoef
 mcc = matthews_corrcoef(y_test, y_pred)
 print(f'MCC: {mcc}')
 2
 2
 4
 4
 4
 MCC: 0.5773502691896258
 7







tugaspertemuan5-2
 November 23, 2024
 [8]: from sklearn.datasets import fetch_openml
 X, y = fetch_openml('mnist_784', data_home='./dataset/mnist', return_X_y=True)
 X.shape
 [8]: (70000, 784)
 [12]: import matplotlib.pyplot as plt
 import matplotlib.cm as cm
 pos = 1
 for data in X[:8]:
 plt.subplot(1, 8, pos)
 plt.imshow(data.reshape((28, 28)),
 cmap=cm.Greys_r)
 plt.axis('off')
 pos +=1
 plt.show()--------------------------------------------------------------------------
AttributeError
 Traceback (most recent call last)
 Cell In[12], line 7
 5 for data in X[:8]:
 6
 plt.subplot(1, 8, pos)----> 7
 8
 9
 10
 plt.imshow(data.reshape((28, 28)),
 cmap=cm.Greys_r)
 plt.axis('off')
 pos +=1
 AttributeError: 'str' object has no attribute 'reshape'
 1
[14]: y[:8]
 [14]: 0
 1
 2
 3
 4
 5
 6
 7
 5
 0
 4
 1
 9
 2
 1
 3
 Name: class, dtype: category
 Categories (10, object): ['0', '1', '2', '3', â€¦, '6', '7', '8', '9']
 [18]: # X_train = X[:60000]
 # y_train = y[:60000]
 # X_test = X[60000:]
 # y_test = y[60000:]
 X_train = X[:1000]
 y_train = y[:1000]
 X_test = X[69000:]
 y_test = y[69000:]
 2
[20]: fromsklearn.svmimport SVC
 model =SVC(random_state=0)
 model.fit(X_train,y_train)
 [20]: SVC(random_state=0)
 [24]: fromsklearn.metricsimport classification_report
 y_pred =model.predict(X_test)
 print(classification_report(y_test,y_pred))
 precision recall f1-score support
 0 0.93 0.98 0.95 102
 1 0.97 0.99 0.98 119
 2 0.85 0.82 0.84 99
 3 0.97 0.87 0.92 102
 4 0.88 0.95 0.91 92
 5 0.91 0.86 0.88 85
 6 0.93 0.95 0.94 102
 7 0.92 0.94 0.93 115
 8 0.89 0.94 0.91 94
 9 0.92 0.84 0.88 90
 accuracy 0.92 1000
 macroavg 0.92 0.91 0.91 1000
 weightedavg 0.92 0.92 0.92 1000
 [26]: fromsklearn.model_selectionimport GridSearchCV
 parameters= {
 'kernel': ['rbf', 'poly','sigmoid'],
 'C':[0.5,1, 10, 100],
 'gamma':['scale',1,0.1,0.01,0.001]
 }
 grid_search= GridSearchCV(estimator=SVC(random_state=0),
 param_grid=parameters,
 n_jobs=6,
 verbose=1,
 scoring='accuracy')
 grid_search.fit(X_train,y_train)
 Fitting5foldsforeachof60candidates,totalling300fits
 3
[26]: GridSearchCV(estimator=SVC(random_state=0), n_jobs=6,
 param_grid={'C': [0.5, 1, 10, 100],
 'gamma': ['scale', 1, 0.1, 0.01, 0.001],
 'kernel': ['rbf', 'poly', 'sigmoid']},
 scoring='accuracy', verbose=1)
 [27]: print(f'Best Score: {grid_search.best_score_}')
 best_params = grid_search.best_estimator_.get_params()
 print(f'Best Parameters:')
 for param in parameters:
 print(f'\t{param}: {best_params[param]}')
 Best Score: 0.907
 Best Parameters:
 kernel: rbf
 C: 10
 gamma: scale
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 4
[ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 [ ]:
 5
